<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace {{ namespace }};

use Magento\Framework\ObjectManagerInterface;

final class {{ class }}ArrayMapper
{
    /**
     * @var mixed
     */
    private $data;

    /**
     * @var ObjectManagerInterface
     */
    private $objectManager;

    public function __construct(ObjectManagerInterface $objectManager) {
        $this->objectManager = $objectManager;
    }

    /**
    * Convert the DTO to the array with the data
    *
    * @param {{ class }} $dto
    * @return array
    */
    public function convertToArray({{ class }} $dto) {
        $result = [];
{% for field in fields %}
{% if not field.is_object %}
        $result["{{ field.fieldName }}"] = $dto->get{{ field.name }}();
{% else %}
{% if field.type == "array" %}
        /** Convert complex Array field **/
        $fieldArray = [];
        foreach ($dto->get{{ field.name }}() as $fieldArrayDto) {
            $fieldData[] = $this->objectManager->get({{ field.elementType }}::class)
                ->convertToArray($fieldArrayDto);
        }
        $result["{{ field.fieldName }}"] = $fieldArray;
{% else %}
        if ($dto->get{{ field.name }}() !== null) {
            $result["{{ field.fieldName }}"] = $this->objectManager->get({{ field.elementType }}::class)
                ->convertToArray($dto->get{{ field.name }}());
        }
{% endif %}
{% endif %}
{% endfor %}
        return $result;
    }
}
