<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace {{ namespace }};

{% for method in methods %}
use {{ method.proto.input|split('\\', 2)[1] }};
use {{ method.proto.output|split('\\', 2)[1] }};
use {{ method.input.interface|split('\\', 2)[1] }};
use {{ method.output.interface|split('\\', 2)[1] }};
{% endfor %}

/**
 * Autogenerated description for {{ name }} class
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 * @SuppressWarnings(PHPMD.CyclomaticComplexity)
 * @SuppressWarnings(PHPMD.NPathComplexity)
 * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
 */
class {{ name }} implements {{ interface }}
{
    /**
     * @var {{ serverInterface }}
     */
    private $service;

    /**
     * @param {{ serverInterface }} $service
     */
    public function __construct(
        {{ serverInterface }} $service
    ) {
        $this->service = $service;
    }

{% for method in methods %}
    {% set methodProtoInputName = method.proto.input|split('\\')|last %}
    {% set methodProtoOutputName = method.proto.output|split('\\')|last %}
    {% set methodInputInterfaceName = method.input.interface|split('\\')|last %}
    {% set methodOutputInterfaceName = method.output.interface|split('\\')|last %}
    /**
     * Autogenerated description for {{ method.name }} method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param {{ methodProtoInputName }} $in
     * @return {{ methodProtoOutputName }}
     */
    public function {{ method.name }}(\Spiral\GRPC\ContextInterface $ctx, {{ methodProtoInputName }} $in)
    : {{ methodProtoOutputName }}
    {
        try {
            $magentoDtoRequest = $this->{{ method.name }}FromProto($in);
            $magentoDtoResponse = $this->service->{{ method.name }}($magentoDtoRequest);
            return $this->{{ method.name }}ToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for {{ method.name }} method
     *
     * @param {{ methodProtoInputName }} $value
     * @return {{ methodInputInterfaceName }}
     */
    private function {{ method.name }}FromProto({{ methodProtoInputName }} $value): {{ methodInputInterfaceName }}
    {
        {{ method.input.fromProtoContent|raw }}

        return $out;
    }

    /**
     * Autogenerated description for {{ method.name }} method
     *
     * @param {{ methodOutputInterfaceName }} $value
     * @return {{ methodProtoOutputName }}
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function {{ method.name }}ToProto({{ methodOutputInterfaceName }} $value): {{ methodProtoOutputName}}
    {
        {{ method.output.toProtoContent|raw }}

        return $proto;
    }

{% endfor %}
}
